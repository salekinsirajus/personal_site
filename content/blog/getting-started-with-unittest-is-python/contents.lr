title: Getting Started with unittest in Python
---
author: Sirajus Salekin
---
body:

I have a confession to make first: I should have started using unittests more seriously a while ago. Sure, I would use a something like a `tmp.py` and test the script with a bunch of different inputs and make sure they all work. But this does not make sure you take care of all--or at least the critical ones--and don't break the program trying to fix another bug. Anyway, I encountered a bunch of problems while trying to get started with unittesting. And there weren't many examples out there that I could follow: most of them either are too simplistic, or too complex. So I thought I would write a post on this for someone in my shoes who might find this useful.

Unit testing is basically testing the small components of a system (e.g, a function) in isolation, so it does not test how the components fit together (for that, look into [integration testing](https://en.wikipedia.org/wiki/Integration_testing)). 

Anyway, I needed to test a class and the methods, and after some googling, I could not find many examples or resources that go beyond testing a simple function such as `is_prime()`. But I needed something a bit more complex. This is how my class looked like:

```python
class Board(object):

    def __init__(self, list2d):
        self.board = list2d
        self.playerO = 'O'
        self.playerX = 'X'

    def is_valid(self, src, dst):
        '''Checking to see if it's possible to move from src to dst.'''
        try:
            (x,y) = src
            (a,b) = dst
            srcSym = self.get_sym(src)
            dstSym = self.get_sym(dst)
			.
			.
			.
            if dstSym == srcSym:
                print("")
                return False
                 else:
                return True
        except IndexError as e:
            print ("out of the board {0} {1}".format(dst, e))
            return False

    def get_sym(self, position):
        try:
            (x, y) = position
            .
            .
            .
        except IndexError:
            return None

	def get_direction(self, posit):
		pass
		
    def get_moves(self, posit):
        try:
            (x,y) = posit
            direction = self.get_direction(posit)
            all_moves = []
            valid_moves = []
			 .
			 .
			 .
            return valid_moves
        except TypeError:
            print("Invalid position, TypeError raised.")
            return []


    def move_forward(self, posit):
        # identify the destination
        # validate move
        # return success or failure
        pass

    def move_dright(self, posit):
        pass

    def move_dleft(self, posit):
        pass 
```
Don't worry about understanding all the methods (plus I omitted part of the code, to keep things short and simple). To test these methods, I needed to initialize some data structure,i.e., two-dimensional lists, so I can use them for all the methods. So first things first, import the `unittest` module. It comes with standard python installations. Then you create a class by subclassing `unittest.TestCase`.  Finally, you call the `unittest.main()` under the `if __name__=='__main__':` . So I came up with the following initially.:
```python
import unittest
from transition import Board

class TestBoardMethods(unittest.TestCase):

    def __init__(self):
        self.threeX3List = [['x','x','x'],
                            ['.','.','.'],
                            ['o','o', 'o'],
                            ]
        self.threeX3Board = Board(self.threeX3List
        
    def test_is_valid_false(self):
        pairs_false = [[(0,0),(0,0)],    # False, src = dst
                        [(0,0),(0,2)],   # False, two units, same row
                        [(0,0),(-1,0)],  # False, out of index
                        [(0,0),(0,1)],   # False, same row
                        [(0,0),(1,-1)],  # False, out of index
                        [(0,0),(1,2)],   # False, moving two units
                        [(0,0),(2,0)],   # False, moving two units
                        [(0,0),(2,2)],   # False, moving two units
                        [(0,0),(11,11)]  # False, out of index
                        ]
        for pair in pairs_false:
            with self.subTest(pair=pair):
                self.assertIs(self.threeX3Board.is_valid(pair[0],pair[1]), False)
                
if __name__ == '__main__':
    unittest.main()
```
This gave me an error: 
```
TypeError: __init__() takes 1 positional argument but 2 were given
```
So turns out having a `__init__` method is not a good way to go. I later figured out that the `unittest`
has these methods called `setUp` and `tearDown` methods for such cases. So I turned the script
into the following:
```python
import unittest
from transition import Board

class TestBoardMethods(unittest.TestCase):

    def setUp(self):
        self.threeX3List = [['x','x','x'],
                            ['.','.','.'],
                            ['o','o', 'o'],
                            ]
        self.threeX3Board = Board(self.threeX3List)

    def tearDown(self):
        pass
        
    def test_is_valid_false(self):
        pairs_false = [[(0,0),(0,0)],    # False, src = dst
                        [(0,0),(0,2)],   # False, two units, same row
                        [(0,0),(-1,0)],  # False, out of index
                        [(0,0),(0,1)],   # False, same row
                        [(0,0),(1,-1)],  # False, out of index
                        [(0,0),(1,2)],   # False, moving two units
                        [(0,0),(2,0)],   # False, moving two units
                        [(0,0),(2,2)],   # False, moving two units
                        [(0,0),(11,11)]  # False, out of index
                        ]
        for pair in pairs_false:
            with self.subTest(pair=pair):
                self.assertIs(self.threeX3Board.is_valid(pair[0],pair[1]), False)
                
if __name__ == '__main__':
    unittest.main()
```
Before a test is run, the unittest method runs the `setUp` method. After it is done running a test, `unittest`
runs the `tearDown` method. In my case, `tearDown` wasn't super useful, but it is a very useful method when
it comes to things like closing a connection or a port.

When I thought about writing this post, my goal was to help you waste less time trying to find a code
example to get started with. So I'm going to basically list things that I learned while using the `unittest` module.
Hope someone finds this useful.

- To test if some value is exactly`False` or `True`, use `AssertIs(val, False)` instead of `AssertFalse` or `AssertTrue`. This is explained well [here](http://jamescooke.info/python-unittest-asserttrue-is-truthy-assertfalse-is-falsy.html).
-  Use  `subTest` when running a bunch of assertion off a list. It shows exactly for which item did the test fail.
- On the same note as above, use highly descriptive names for each test.

That's all I could think of right now, in terms of the difficulties I had using this library. If I remember more, I will
add them here. A bunch of great pieces of advice are posted [here](http://docs.python-guide.org/en/latest/writing/tests/) on unittesting.
---
pub_date: 2018-02-15
---
twitter_handle: sirsalekin
